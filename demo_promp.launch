<launch>

  <!-- By default, we do not start a database (it can be large) -->
  <arg name="db" default="false" />
  <!-- Allow user to specify database location -->
  <arg name="db_path" default="$(find panda_moveit_config)/default_warehouse_mongo_db" />

  <!-- By default, we are not in debug mode -->
  <arg name="debug" default="false" />
  <arg name="load_gripper" default="false"/>




            <!-- ########################### Start: Ash Modification to the demo.launch file ##################### -->

  <!-- <param name ="/use_sim_time" value="true"/> -->
  <node pkg="tf" type="static_transform_publisher" name="create_world_transform" args="0 0 0 0 0 0 1 /world /panda_link0 100"/>

  <!-- <node pkg="tf" type="static_transform_publisher" name="create_map_transform" args="0 0 0 0 0 0 1 /ceiling_camera_link /map 100"/> -->
  <node pkg="tf" type="static_transform_publisher" name="ceiling_cam_transform" args="-0.12019394, -0.04154276,  1.53544738  0.64843474, -0.64567785,  0.28140082, -0.28887035 /world /ceiling_camera_link 100"/>  
  <node pkg="tf" type="static_transform_publisher" name="create_ceiling_2_rgb_optical_frame" args="0 0 0 0 0 0 1 /ceiling_camera_link /ceiling_camera_rgb_optical_frame 100"/>
  <node pkg="tf" type="static_transform_publisher" name="create_ceiling_2_ir_optical_frame" args="-0.058, 0.013, 0.062 0.001, 0.004, 0.0, 1.0 /ceiling_camera_link /ceiling_camera_ir_optical_frame 100"/>

  <!-- <node pkg="rosbag" type="play" name="player" output="screen" args="-l clock /home/automato/Ash/scripts/ceiling_cam_qhd_points.bag"/> -->
  
   <!-- To play multiple rosbag files -->
  <!-- <arg name="path" default="/home/me/ros_files/" />
  <arg name="file_1" default="my_file_1" />
  <arg name="file_2" default="my_file_2" />
  <node pkg="rosbag" type="play" name="player" output="screen" args="clock $(arg path)$(arg file_1).bag $(arg path)$(arg file_2).bag"/> -->

  <!-- <include file="$(find panda_moveit_config)/launch/panda_moveit.launch">
    <arg name="load_gripper" value="$(arg load_gripper)" />
  </include> -->

  <!-- <param name="octomap_resolution" type="double" value="0.025" /> -->
  <!-- <param name="octomap_frame" type="string" value="ceiling_camera_link" /> -->
  <!-- <param name="max_range" type="double" value="2.0" /> -->
  
  <!-- Load the robot specific sensor manager; this sets the moveit_sensor_manager ROS parameter -->
  <!-- <arg name="moveit_sensor_manager" default="panda" /> -->

  <!-- <include file="$(find panda_moveit_config)/launch/$(arg moveit_sensor_manager)_moveit_sensor_manager.launch.xml" /> -->
  

<!-- ########################### End: Ash Modification to the demo.launch file ##################### -->




  <!--
  By default, hide joint_state_publisher's GUI

  MoveIt!'s "demo" mode replaces the real robot driver with the joint_state_publisher.
  The latter one maintains and publishes the current joint configuration of the simulated robot.
  It also provides a GUI to move the simulated robot around "manually".
  This corresponds to moving around the real robot without the use of MoveIt.
  -->
  <arg name="use_gui" default="false" />

  <!-- Load the URDF, SRDF and other .yaml configuration files on the param server -->
  <include file="$(find panda_moveit_config)/launch/planning_context.launch">
    <arg name="load_robot_description" value="true"/>
  </include>



  <!-- If needed, broadcast static tf for robot root -->
  

  <!-- We do not have a robot connected, so publish fake joint states -->
  <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
    <param name="/use_gui" value="$(arg use_gui)"/>
    <rosparam param="/source_list">[/move_group/fake_controller_joint_states]</rosparam>
  </node>

  <!-- Given the published joint states, publish tf for the robot links -->
  <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" respawn="true" output="screen" />

  <!-- Run the main MoveIt executable without trajectory execution (we do not have controllers configured by default) -->
  <include file="$(find panda_moveit_config)/launch/move_group.launch">
    <arg name="allow_trajectory_execution" value="true"/>
    <arg name="fake_execution" value="true"/>
    <arg name="info" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- Run Rviz and load the default config to see the state of the move_group node -->
  <include file="$(find panda_moveit_config)/launch/moveit_rviz.launch">
    <arg name="config" value="true"/>
    <arg name="debug" value="$(arg debug)"/>
  </include>

  <!-- If database loading was enabled, start mongodb as well -->
  <include file="$(find panda_moveit_config)/launch/default_warehouse_db.launch" if="$(arg db)">
    <arg name="moveit_warehouse_database_path" value="$(arg db_path)"/>
  </include>

</launch>
